require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe BodyMaterialsController do

  def mock_body_material(stubs={})
    @mock_body_material ||= mock_model(BodyMaterial, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all body_materials as @body_materials" do
      BodyMaterial.stub(:all) { [mock_body_material] }
      get :index
      assigns(:body_materials).should eq([mock_body_material])
    end
  end

  describe "GET show" do
    it "assigns the requested body_material as @body_material" do
      BodyMaterial.stub(:find).with("37") { mock_body_material }
      get :show, :id => "37"
      assigns(:body_material).should be(mock_body_material)
    end
  end

  describe "GET new" do
    it "assigns a new body_material as @body_material" do
      BodyMaterial.stub(:new) { mock_body_material }
      get :new
      assigns(:body_material).should be(mock_body_material)
    end
  end

  describe "GET edit" do
    it "assigns the requested body_material as @body_material" do
      BodyMaterial.stub(:find).with("37") { mock_body_material }
      get :edit, :id => "37"
      assigns(:body_material).should be(mock_body_material)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created body_material as @body_material" do
        BodyMaterial.stub(:new).with({'these' => 'params'}) { mock_body_material(:save => true) }
        post :create, :body_material => {'these' => 'params'}
        assigns(:body_material).should be(mock_body_material)
      end

      it "redirects to the created body_material" do
        BodyMaterial.stub(:new) { mock_body_material(:save => true) }
        post :create, :body_material => {}
        response.should redirect_to(body_material_url(mock_body_material))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved body_material as @body_material" do
        BodyMaterial.stub(:new).with({'these' => 'params'}) { mock_body_material(:save => false) }
        post :create, :body_material => {'these' => 'params'}
        assigns(:body_material).should be(mock_body_material)
      end

      it "re-renders the 'new' template" do
        BodyMaterial.stub(:new) { mock_body_material(:save => false) }
        post :create, :body_material => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested body_material" do
        BodyMaterial.stub(:find).with("37") { mock_body_material }
        mock_body_material.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :body_material => {'these' => 'params'}
      end

      it "assigns the requested body_material as @body_material" do
        BodyMaterial.stub(:find) { mock_body_material(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:body_material).should be(mock_body_material)
      end

      it "redirects to the body_material" do
        BodyMaterial.stub(:find) { mock_body_material(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(body_material_url(mock_body_material))
      end
    end

    describe "with invalid params" do
      it "assigns the body_material as @body_material" do
        BodyMaterial.stub(:find) { mock_body_material(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:body_material).should be(mock_body_material)
      end

      it "re-renders the 'edit' template" do
        BodyMaterial.stub(:find) { mock_body_material(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested body_material" do
      BodyMaterial.stub(:find).with("37") { mock_body_material }
      mock_body_material.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the body_materials list" do
      BodyMaterial.stub(:find) { mock_body_material }
      delete :destroy, :id => "1"
      response.should redirect_to(body_materials_url)
    end
  end

end
