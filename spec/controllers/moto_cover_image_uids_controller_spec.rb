require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe MotoCoverImageUidsController do

  def mock_moto_cover_image_uid(stubs={})
    @mock_moto_cover_image_uid ||= mock_model(MotoCoverImageUid, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all moto_cover_image_uids as @moto_cover_image_uids" do
      MotoCoverImageUid.stub(:all) { [mock_moto_cover_image_uid] }
      get :index
      assigns(:moto_cover_image_uids).should eq([mock_moto_cover_image_uid])
    end
  end

  describe "GET show" do
    it "assigns the requested moto_cover_image_uid as @moto_cover_image_uid" do
      MotoCoverImageUid.stub(:find).with("37") { mock_moto_cover_image_uid }
      get :show, :id => "37"
      assigns(:moto_cover_image_uid).should be(mock_moto_cover_image_uid)
    end
  end

  describe "GET new" do
    it "assigns a new moto_cover_image_uid as @moto_cover_image_uid" do
      MotoCoverImageUid.stub(:new) { mock_moto_cover_image_uid }
      get :new
      assigns(:moto_cover_image_uid).should be(mock_moto_cover_image_uid)
    end
  end

  describe "GET edit" do
    it "assigns the requested moto_cover_image_uid as @moto_cover_image_uid" do
      MotoCoverImageUid.stub(:find).with("37") { mock_moto_cover_image_uid }
      get :edit, :id => "37"
      assigns(:moto_cover_image_uid).should be(mock_moto_cover_image_uid)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created moto_cover_image_uid as @moto_cover_image_uid" do
        MotoCoverImageUid.stub(:new).with({'these' => 'params'}) { mock_moto_cover_image_uid(:save => true) }
        post :create, :moto_cover_image_uid => {'these' => 'params'}
        assigns(:moto_cover_image_uid).should be(mock_moto_cover_image_uid)
      end

      it "redirects to the created moto_cover_image_uid" do
        MotoCoverImageUid.stub(:new) { mock_moto_cover_image_uid(:save => true) }
        post :create, :moto_cover_image_uid => {}
        response.should redirect_to(moto_cover_image_uid_url(mock_moto_cover_image_uid))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved moto_cover_image_uid as @moto_cover_image_uid" do
        MotoCoverImageUid.stub(:new).with({'these' => 'params'}) { mock_moto_cover_image_uid(:save => false) }
        post :create, :moto_cover_image_uid => {'these' => 'params'}
        assigns(:moto_cover_image_uid).should be(mock_moto_cover_image_uid)
      end

      it "re-renders the 'new' template" do
        MotoCoverImageUid.stub(:new) { mock_moto_cover_image_uid(:save => false) }
        post :create, :moto_cover_image_uid => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested moto_cover_image_uid" do
        MotoCoverImageUid.stub(:find).with("37") { mock_moto_cover_image_uid }
        mock_moto_cover_image_uid.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :moto_cover_image_uid => {'these' => 'params'}
      end

      it "assigns the requested moto_cover_image_uid as @moto_cover_image_uid" do
        MotoCoverImageUid.stub(:find) { mock_moto_cover_image_uid(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:moto_cover_image_uid).should be(mock_moto_cover_image_uid)
      end

      it "redirects to the moto_cover_image_uid" do
        MotoCoverImageUid.stub(:find) { mock_moto_cover_image_uid(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(moto_cover_image_uid_url(mock_moto_cover_image_uid))
      end
    end

    describe "with invalid params" do
      it "assigns the moto_cover_image_uid as @moto_cover_image_uid" do
        MotoCoverImageUid.stub(:find) { mock_moto_cover_image_uid(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:moto_cover_image_uid).should be(mock_moto_cover_image_uid)
      end

      it "re-renders the 'edit' template" do
        MotoCoverImageUid.stub(:find) { mock_moto_cover_image_uid(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested moto_cover_image_uid" do
      MotoCoverImageUid.stub(:find).with("37") { mock_moto_cover_image_uid }
      mock_moto_cover_image_uid.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the moto_cover_image_uids list" do
      MotoCoverImageUid.stub(:find) { mock_moto_cover_image_uid }
      delete :destroy, :id => "1"
      response.should redirect_to(moto_cover_image_uids_url)
    end
  end

end
